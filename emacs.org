* Base
** Ace of Base
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote(tango-dark)))
 '(package-selected-packages
    (quote(go-mode atomic-chrome ag projectile org-projectile slack use-package magit company-web tide indium web-mode dockerfile-mode))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC
** Custom Functions
#+BEGIN_SRC emacs-lisp
  (defun nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))

  (defun open-assets-site ()
    (interactive)
    (browse-url-default-macosx-browser "https://localhost.adobecc.com/projects?flags=cc_projects,cc_projects_upload"))

  (global-set-key (kbd "C-x K") 'nuke-all-buffers)

  (defun mal/load-config ()
    (interactive)
    (find-file config-file))

  (global-set-key (kbd "C-~") 'mal/load-config)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
:ensure t
:config
  (global-flycheck-mode))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
:config 
  (setq company-idle-delay 0.3)
  (global-company-mode t))
#+END_SRC
** ag
#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC
* Org Projectile
#+BEGIN_SRC emacs-lisp
(use-package org-projectile
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c c" . org-capture))
  :config
  (progn
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath "project_todos.org")
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    (push (org-projectile-project-todo-entry) org-capture-templates))
  :ensure t)
#+END_SRC
* Slack
#+BEGIN_SRC emacs-lisp
  (require 'auth-source)
  (use-package slack
    :commands (slack-start)
    :config
    (slack-register-team
     :name "creativecloud"
     :default t
     :token (auth-source-pick-first-password :host "creativecloud.slack.com"))
    (setq slack-completing-read-function #'ido-completing-read)
    (setq slack-buffer-function #'switch-to-buffer)
    (setq slack-prefer-current-team t)
    (setq slack-display-team-name nil)
    (define-key ctl-x-map "j" #'slack-select-rooms)
    (define-key slack-mode-map (kbd "M-o") (kbd "<backtab> RET M->"))
    (define-key slack-mode-map "@" 
      (defun endless/slack-message-embed-mention ()
	(interactive)
	(call-interactively #'slack-message-embed-mention)
	(insert " ")))
    (define-key slack-mode-map (kbd "C-c C-d") #'slack-message-delete)
    (define-key slack-mode-map (kbd "C-c C-e") #'slack-message-edit)
    (define-key slack-mode-map (kbd "C-c C-k") #'slack-channel-leave)
    (defun slack-user-status (_id _team) "")
    (setq slack-message-notification-title-format-function
      (lambda (_team room threadp)
	(concat (if threadp "Thread in #%s") room)))
    (defun endless/-cleanup-room-name (room-name)
      "Make group-chat names a bit more human-readable."
      (replace-regexp-in-string
	"--" " "
	(replace-regexp-in-string "#mpdm-" "" room-name)))
    (setq slack-message-im-notification-title-format-function
      (lambda (_team room threadp)
	(concat (if threadp "Thread in %s") 
	  (endless/-cleanup-room-name room))))
  )
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;;Projectile Setup
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
* Web
#+BEGIN_SRC emacs-lisp
  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
#+END_SRC
* Javascript
** Setup Tide Mode
#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))
#+END_SRC

** Typescript
#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/Users/smorrice/.nvs/default/bin/")))
  (use-package tide
    :ensure t
    :bind ("M-/" . 'tide-references)
    :mode ("\\.ts\\'" . typescript-mode)
    :hook (typescript-mode . #'setup-tide-mode)
    :config
      (company-mode +1)
      (setq tide-tsserver-executable "/Users/smorrice/.nvs/default/bin/tsserver")
      (setq company-tooltip-align-annotations t))
#+END_SRC

** Javascript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (progn
      (add-hook 'js2-mode-hook #'setup-tide-mode)
      ;; configure javascript-tide checker to run after your default javascript checker
      (setq js2-basic-offset 2)
      (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
      (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
      (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))))
#+END_SRC
** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :config
    (progn
      (flycheck-add-mode 'json-jsonlint 'json-mode)
      (add-hook 'json-mode-hook 'flycheck-mode)
      (setq js-indent-level 2)
      (add-to-list 'auto-mode-alist '("\\.json" . json-mode))))
#+END_SRC

** JSX & TSX
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (progn
      (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.js" . web-mode))
      ;; this magic incantation fixes highlighting of jsx syntax in .js files
      (setq web-mode-content-types-alist
	    '(("jsx" . "\\.js[x]?\\'")))
      (add-hook 'web-mode-hook
		(lambda ()
		  (setq web-mode-code-indent-offset 4)
		  (when (string-equal "tsx" (file-name-extension buffer-file-name))
		    (setup-tide-mode))
		  (when (string-equal "jsx" (file-name-extension buffer-file-name))
		    (setup-tide-mode))
		  (when (string-equal "js" (file-name-extension buffer-file-name))
		    (progn
		      (setup-tide-mode)
		      (with-eval-after-load 'flycheck
			(flycheck-add-mode 'typescript-tslint 'web-mode)
			(flycheck-add-mode 'javascript-tide 'web-mode))))))
      ))
#+END_SRC

* Atomic Chrome
#+BEGIN_SRC emacs-lisp
(require 'atomic-chrome)
;;(require 'ox-jira)
;;(setq atomic-chrome-url-major-mode-alist (("wiki\.corp\.adobe\.com" . ox-jira)))
(atomic-chrome-start-server)
#+END_SRC
* Look and Feel
#+BEGIN_SRC emacs-lisp
;; formatting all views
;;(display-line-numbers relative)
(load-theme 'tango-dark)
(set-face-attribute 'default nil :family "Fira Code")
(set-face-attribute 'default nil :height 160)
#+END_SRC
