* Base
** Ace of Base
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote(tango-dark)))
 '(package-selected-packages
    (quote(go-mode atomic-chrome ag projectile org-projectile slack use-package magit company-web tide indium web-mode dockerfile-mode))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(delete-selection-mode t)
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024))
(setq make-backup-files nil)
(setq make-lockfiles nil)
(setq tab-width 4)
(setq indent-tabs-mode nil)
(global-display-line-numbers-mode)


#+END_SRC
** Custom Functions
#+BEGIN_SRC emacs-lisp
  (defun nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))

  (global-set-key (kbd "C-x K") 'nuke-all-buffers)

  (defun mal/load-config ()
    (interactive)
    (find-file config-file))

  (global-set-key (kbd "C-~") 'mal/load-config)
#+END_SRC
** IDO
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
    :ensure t
    :config
        (global-flycheck-mode))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
:config 
  (setq company-idle-delay 0.0)
  (global-company-mode t))
#+END_SRC
** ag
#+BEGIN_SRC emacs-lisp
(use-package ag)
(use-package helm-ag)
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
:ensure t)

(use-package helm-lsp
:ensure t)

(use-package typescript-mode
:ensure t)

(use-package svelte-mode
:ensure t)

(use-package js2-mode
:ensure t)

(use-package rjsx-mode
:ensure t)

(use-package json-mode
    :ensure t)

(use-package web-mode
    :ensure t
    :mode (
        ("\\.js\\'" . web-mode)
        ("\\.mjs\\'" . web-mode)
	("\\.jsx\\'" . web-mode)
	("\\.ts\\'" . web-mode)
	("\\.tsx\\'" . web-mode)
	("\\.html\\'" . web-mode)
	("\\.svelte\\'" . web-mode))
    :commands web-mode)

(use-package lsp-mode
    :ensure t
    :init (
        setq lsp-clients-typescript-tls-path nil)
    :hook (
        (web-mode . lsp-deferred)
	(c-mode . lsp-deferred)
	(c++-mode . lsp-deferred))
    :bind (
        ("M-/" . lsp-find-references))
    :commands lsp-deferred)

(use-package lsp-ui
:ensure t
:commands lsp-ui-mode)

#+END_SRC
* Org Projectile
#+BEGIN_SRC emacs-lisp

(org-babel-do-load-languages
  'org-babel-load-languages
  '((js . t)))

(use-package org-projectile
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c c" . org-capture))
  :config
  (progn
    (org-projectile-per-project)
    (setq org-projectile-per-project-filepath "project_todos.org")
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    (push (org-projectile-project-todo-entry) org-capture-templates))
  :ensure t)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;;Projectile Setup
(use-package helm-projectile :ensure t)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
#+END_SRC
* Look and Feel
#+BEGIN_SRC emacs-lisp
;; formatting all views
;;(display-line-numbers relative)
(load-theme 'tango-dark)
(set-face-attribute 'default nil :family "Fira Code")
(set-face-attribute 'default nil :height 160)
(setq indent-tabs-mode nil)
#+END_SRC
