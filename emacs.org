* Base
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (tango-dark)))
 '(package-selected-packages
   (quote
    (ag projectile slack use-package magit company-web tide indium))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
** Nuke All Buffers
#+BEGIN_SRC emacs-lisp
  (defun nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))

  (global-set-key (kbd "C-x K") 'nuke-all-buffers)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;;Projectile Setup
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
* Javascript
** Requires
#+BEGIN_SRC emacs-lisp
  (require 'flycheck)
  (require 'ag)
#+END_SRC

** Setup Tide Mode
#+BEGIN_SRC emacs-lisp
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))
#+END_SRC

** Typescript
#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/Users/smorrice/.nvs/default/bin/")))
  (use-package tide
    :ensure t
    :config
    (progn
      (company-mode +1)
      ;; aligns annotation to the right hand side
      (setq company-tooltip-align-annotations t)
      (add-hook 'typescript-mode-hook #'setup-tide-mode)
      (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
    ))
#+END_SRC

** Javascript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (progn
      (add-hook 'js2-mode-hook #'setup-tide-mode)
      ;; configure javascript-tide checker to run after your default javascript checker
      (setq js2-basic-offset 2)
      (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
      (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
      (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))))
#+END_SRC
** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :config
    (progn
      (flycheck-add-mode 'json-jsonlint 'json-mode)
      (add-hook 'json-mode-hook 'flycheck-mode)
      (setq js-indent-level 2)
      (add-to-list 'auto-mode-alist '("\\.json" . json-mode))))
#+END_SRC

** JSX & TSX
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (progn
      (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.js" . web-mode))
      ;; this magic incantation fixes highlighting of jsx syntax in .js files
      (setq web-mode-content-types-alist
	    '(("jsx" . "\\.js[x]?\\'")))
      (add-hook 'web-mode-hook
		(lambda ()
		  (setq web-mode-code-indent-offset 4)
		  (when (string-equal "tsx" (file-name-extension buffer-file-name))
		    (setup-tide-mode))
		  (when (string-equal "jsx" (file-name-extension buffer-file-name))
		    (setup-tide-mode))
		  (when (string-equal "js" (file-name-extension buffer-file-name))
		    (progn
		      (setup-tide-mode)
		      (with-eval-after-load 'flycheck
			(flycheck-add-mode 'typescript-tslint 'web-mode)
			(flycheck-add-mode 'javascript-tide 'web-mode))))))
      ))
#+END_SRC

* Atomic Chrome
#+BEGIN_SRC emacs-lisp
(require 'atomic-chrome)
;;(require 'ox-jira)
;;(setq atomic-chrome-url-major-mode-alist (("wiki\.corp\.adobe\.com" . ox-jira)))
(atomic-chrome-start-server)
#+END_SRC
* Look and Feel
#+BEGIN_SRC emacs-lisp
;; formatting all views
;;(display-line-numbers relative)
(load-theme 'tango-dark)
(set-face-attribute 'default nil :family "Fira Code")
(set-face-attribute 'default nil :height 160)
#+END_SRC
